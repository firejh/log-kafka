// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_MetadataEntry;
class Node_MetadataEntryDefaultTypeInternal;
extern Node_MetadataEntryDefaultTypeInternal _Node_MetadataEntry_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class ServiceAttr;
class ServiceAttrDefaultTypeInternal;
extern ServiceAttrDefaultTypeInternal _ServiceAttr_default_instance_;
class Service_MetadataEntry;
class Service_MetadataEntryDefaultTypeInternal;
extern Service_MetadataEntryDefaultTypeInternal _Service_MetadataEntry_default_instance_;

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_2eproto

enum ServiceRoleType {
  SRT_UNKOWN = 0,
  SRT_Provider = 1,
  SRT_Consumer = 2
};
bool ServiceRoleType_IsValid(int value);
const ServiceRoleType ServiceRoleType_MIN = SRT_UNKOWN;
const ServiceRoleType ServiceRoleType_MAX = SRT_Consumer;
const int ServiceRoleType_ARRAYSIZE = ServiceRoleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceRoleType_descriptor();
inline const ::std::string& ServiceRoleType_Name(ServiceRoleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceRoleType_descriptor(), value);
}
inline bool ServiceRoleType_Parse(
    const ::std::string& name, ServiceRoleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceRoleType>(
    ServiceRoleType_descriptor(), name, value);
}
// ===================================================================

class ServiceAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceAttr) */ {
 public:
  ServiceAttr();
  virtual ~ServiceAttr();

  ServiceAttr(const ServiceAttr& from);

  inline ServiceAttr& operator=(const ServiceAttr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceAttr(ServiceAttr&& from) noexcept
    : ServiceAttr() {
    *this = ::std::move(from);
  }

  inline ServiceAttr& operator=(ServiceAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAttr& default_instance();

  static inline const ServiceAttr* internal_default_instance() {
    return reinterpret_cast<const ServiceAttr*>(
               &_ServiceAttr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceAttr* other);
  friend void swap(ServiceAttr& a, ServiceAttr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceAttr* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceAttr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceAttr& from);
  void MergeFrom(const ServiceAttr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Group = 1;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional string Service = 2;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string Protocol = 3;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // optional string Version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .ServiceRoleType Role = 5;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 5;
  ::ServiceRoleType role() const;
  void set_role(::ServiceRoleType value);

  // @@protoc_insertion_point(class_scope:ServiceAttr)
 private:
  void set_has_group();
  void clear_has_group();
  void set_has_service();
  void clear_has_service();
  void set_has_protocol();
  void clear_has_protocol();
  void set_has_version();
  void clear_has_version();
  void set_has_role();
  void clear_has_role();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  int role_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string Address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int32 Port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Node)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  class Node_MetadataEntry : public ::google::protobuf::internal::MapEntry<Node_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Node_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Node_MetadataEntry();
    Node_MetadataEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Node_MetadataEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Node_MetadataEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Node_MetadataEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  private:
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Service* other);
  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const PROTOBUF_FINAL { return New(NULL); }

  Service* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .Node Nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  const ::Node& nodes(int index) const;
  ::Node* mutable_nodes(int index);
  ::Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::Node >&
      nodes() const;

  // map<string, string> Metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional .ServiceAttr Attr = 1;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  const ::ServiceAttr& attr() const;
  ::ServiceAttr* mutable_attr();
  ::ServiceAttr* release_attr();
  void set_allocated_attr(::ServiceAttr* attr);

  // @@protoc_insertion_point(class_scope:Service)
 private:
  void set_has_attr();
  void clear_has_attr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Node > nodes_;
  public:
  class Service_MetadataEntry : public ::google::protobuf::internal::MapEntry<Service_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Service_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Service_MetadataEntry();
    Service_MetadataEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Service_MetadataEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Service_MetadataEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Service_MetadataEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  private:
  ::ServiceAttr* attr_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceAttr

// optional string Group = 1;
inline bool ServiceAttr::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceAttr::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceAttr::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceAttr::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group();
}
inline const ::std::string& ServiceAttr::group() const {
  // @@protoc_insertion_point(field_get:ServiceAttr.Group)
  return group_.GetNoArena();
}
inline void ServiceAttr::set_group(const ::std::string& value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceAttr.Group)
}
#if LANG_CXX11
inline void ServiceAttr::set_group(::std::string&& value) {
  set_has_group();
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAttr.Group)
}
#endif
inline void ServiceAttr::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAttr.Group)
}
inline void ServiceAttr::set_group(const char* value, size_t size) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAttr.Group)
}
inline ::std::string* ServiceAttr::mutable_group() {
  set_has_group();
  // @@protoc_insertion_point(field_mutable:ServiceAttr.Group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceAttr::release_group() {
  // @@protoc_insertion_point(field_release:ServiceAttr.Group)
  clear_has_group();
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAttr::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    set_has_group();
  } else {
    clear_has_group();
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:ServiceAttr.Group)
}

// optional string Service = 2;
inline bool ServiceAttr::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceAttr::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceAttr::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceAttr::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
inline const ::std::string& ServiceAttr::service() const {
  // @@protoc_insertion_point(field_get:ServiceAttr.Service)
  return service_.GetNoArena();
}
inline void ServiceAttr::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceAttr.Service)
}
#if LANG_CXX11
inline void ServiceAttr::set_service(::std::string&& value) {
  set_has_service();
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAttr.Service)
}
#endif
inline void ServiceAttr::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAttr.Service)
}
inline void ServiceAttr::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAttr.Service)
}
inline ::std::string* ServiceAttr::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:ServiceAttr.Service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceAttr::release_service() {
  // @@protoc_insertion_point(field_release:ServiceAttr.Service)
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAttr::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:ServiceAttr.Service)
}

// optional string Protocol = 3;
inline bool ServiceAttr::has_protocol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceAttr::set_has_protocol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceAttr::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceAttr::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
inline const ::std::string& ServiceAttr::protocol() const {
  // @@protoc_insertion_point(field_get:ServiceAttr.Protocol)
  return protocol_.GetNoArena();
}
inline void ServiceAttr::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceAttr.Protocol)
}
#if LANG_CXX11
inline void ServiceAttr::set_protocol(::std::string&& value) {
  set_has_protocol();
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAttr.Protocol)
}
#endif
inline void ServiceAttr::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAttr.Protocol)
}
inline void ServiceAttr::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAttr.Protocol)
}
inline ::std::string* ServiceAttr::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:ServiceAttr.Protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceAttr::release_protocol() {
  // @@protoc_insertion_point(field_release:ServiceAttr.Protocol)
  clear_has_protocol();
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAttr::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ServiceAttr.Protocol)
}

// optional string Version = 4;
inline bool ServiceAttr::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceAttr::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceAttr::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceAttr::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ServiceAttr::version() const {
  // @@protoc_insertion_point(field_get:ServiceAttr.Version)
  return version_.GetNoArena();
}
inline void ServiceAttr::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceAttr.Version)
}
#if LANG_CXX11
inline void ServiceAttr::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAttr.Version)
}
#endif
inline void ServiceAttr::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAttr.Version)
}
inline void ServiceAttr::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAttr.Version)
}
inline ::std::string* ServiceAttr::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:ServiceAttr.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceAttr::release_version() {
  // @@protoc_insertion_point(field_release:ServiceAttr.Version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAttr::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ServiceAttr.Version)
}

// optional .ServiceRoleType Role = 5;
inline bool ServiceAttr::has_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceAttr::set_has_role() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceAttr::clear_has_role() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceAttr::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::ServiceRoleType ServiceAttr::role() const {
  // @@protoc_insertion_point(field_get:ServiceAttr.Role)
  return static_cast< ::ServiceRoleType >(role_);
}
inline void ServiceAttr::set_role(::ServiceRoleType value) {
  assert(::ServiceRoleType_IsValid(value));
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:ServiceAttr.Role)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Node

// optional string ID = 1;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:Node.ID)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Node.ID)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Node.ID)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Node.ID)
}
inline void Node::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Node.ID)
}
inline ::std::string* Node::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Node.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:Node.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Node.ID)
}

// optional string Address = 2;
inline bool Node::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Node::address() const {
  // @@protoc_insertion_point(field_get:Node.Address)
  return address_.GetNoArena();
}
inline void Node::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Node.Address)
}
#if LANG_CXX11
inline void Node::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Node.Address)
}
#endif
inline void Node::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Node.Address)
}
inline void Node::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Node.Address)
}
inline ::std::string* Node::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:Node.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_address() {
  // @@protoc_insertion_point(field_release:Node.Address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Node.Address)
}

// optional int32 Port = 3;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  // @@protoc_insertion_point(field_get:Node.Port)
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Node.Port)
}

// map<string, string> Metadata = 4;
inline int Node::metadata_size() const {
  return metadata_.size();
}
inline void Node::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::metadata() const {
  // @@protoc_insertion_point(field_map:Node.Metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Node.Metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Service

// optional .ServiceAttr Attr = 1;
inline bool Service::has_attr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Service::set_has_attr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Service::clear_has_attr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Service::clear_attr() {
  if (attr_ != NULL) attr_->::ServiceAttr::Clear();
  clear_has_attr();
}
inline const ::ServiceAttr& Service::attr() const {
  const ::ServiceAttr* p = attr_;
  // @@protoc_insertion_point(field_get:Service.Attr)
  return p != NULL ? *p : *reinterpret_cast<const ::ServiceAttr*>(
      &::_ServiceAttr_default_instance_);
}
inline ::ServiceAttr* Service::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) {
    attr_ = new ::ServiceAttr;
  }
  // @@protoc_insertion_point(field_mutable:Service.Attr)
  return attr_;
}
inline ::ServiceAttr* Service::release_attr() {
  // @@protoc_insertion_point(field_release:Service.Attr)
  clear_has_attr();
  ::ServiceAttr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void Service::set_allocated_attr(::ServiceAttr* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
  // @@protoc_insertion_point(field_set_allocated:Service.Attr)
}

// repeated .Node Nodes = 2;
inline int Service::nodes_size() const {
  return nodes_.size();
}
inline void Service::clear_nodes() {
  nodes_.Clear();
}
inline const ::Node& Service::nodes(int index) const {
  // @@protoc_insertion_point(field_get:Service.Nodes)
  return nodes_.Get(index);
}
inline ::Node* Service::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:Service.Nodes)
  return nodes_.Mutable(index);
}
inline ::Node* Service::add_nodes() {
  // @@protoc_insertion_point(field_add:Service.Nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Node >*
Service::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:Service.Nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Node >&
Service::nodes() const {
  // @@protoc_insertion_point(field_list:Service.Nodes)
  return nodes_;
}

// map<string, string> Metadata = 3;
inline int Service::metadata_size() const {
  return metadata_.size();
}
inline void Service::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Service::metadata() const {
  // @@protoc_insertion_point(field_map:Service.Metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Service::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Service.Metadata)
  return metadata_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ServiceRoleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServiceRoleType>() {
  return ::ServiceRoleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
